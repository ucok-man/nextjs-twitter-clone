// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?   @unique
  bio             String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  hasNotification Boolean   @default(false)

  followingIds String[] @db.ObjectId
  followings   User[]   @relation("FollowRelation", fields: [followingIds], references: [id])
  followerIds  String[] @db.ObjectId
  followers    User[]   @relation("FollowRelation", fields: [followerIds], references: [id])

  likedPostIds String[] @db.ObjectId
  likedPosts   Post[]   @relation("PostLikeRelation", fields: [likedPostIds], references: [id])

  createdPosts  Post[]         @relation("PostCreatorRelation")
  comments      Comment[]
  notifications Notification[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likedIds String[] @db.ObjectId
  likes    User[]   @relation("PostLikeRelation", fields: [likedIds], references: [id])

  createdBy User   @relation("PostCreatorRelation", fields: [userId], references: [id], onDelete: Cascade)
  userId    String @db.ObjectId

  comments Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String @db.ObjectId
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
}
